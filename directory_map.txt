src/
├── assets/                           # 画像、アイコン、フォント等
│   └── logo.svg
│
├── components/                       # 再利用可能な UI コンポーネント
│   ├── Modal/
│   │   ├── Modal.tsx
│   │   └── modal.css
│   └── Button.tsx
│
├── features/                         # ドメイン（機能）単位で分割
│   ├── auth/                         # 認証機能（ログイン・ログアウト等）
│   │   ├── components/
│   │   │   ├── LoginForm.tsx
│   │   │   └── SignupForm.tsx
│   │   ├── hooks/
│   │   │   └── useAuth.ts
│   │   ├── authService.ts
│   │   ├── authTypes.ts
│   │   ├── AuthGuard.tsx             # PrivateRoute 相当
│   │   └── index.ts
│   │
│   ├── calendar/                     # カレンダーと予定管理機能
│   │   ├── components/
│   │   │   ├── CalendarCell.tsx
│   │   │   ├── AddEventModal.tsx
│   │   │   ├── EventDetailModal.tsx
│   │   │   └── ProfileModal.tsx
│   │   ├── hooks/
│   │   │   └── useCalendar.ts
│   │   ├── calendarService.ts        # API通信（一覧・詳細取得など）
│   │   ├── calendarUtils.ts          # 日付や整形ユーティリティ
│   │   ├── calendarTypes.ts          # イベント型定義
│   │   └── CalendarApp.tsx           # メインコンテナ
│
├── hooks/                            # 共通で使えるカスタムフック
│   └── useModal.ts
│
├── layouts/                          # レイアウト単位
│   └── MainLayout.tsx
│
├── routes/                            # ルーティングごとのページ
│   ├── LoginPage.tsx
│   └── HomePage.tsx
│
├── services/                         # 汎用API通信ロジック（axios等）
│   ├── axios.ts                      # axios インスタンス + Interceptor
│   └── csrf.ts                       # CSRF取得ユーティリティ等
│
├── types/                            # グローバル型定義
│   └── index.d.ts
│
├── utils/                            # 汎用関数（日付処理など）
│   └── date.ts
│
├── App.tsx                           # エントリーポイント（ルーティング）
├── main.tsx                          # ReactDOM.render相当
└── index.css                         # グローバルスタイル




✅ 各ディレクトリの責務まとめ
ディレクトリ	説明
components/	アプリ全体で再利用される小規模UI部品（汎用的なボタン、モーダル等）
features/	機能ごと（カレンダー、認証、チャットなど）に責務を分割。将来的な機能追加に備える
hooks/	グローバルに使えるカスタムフック（例：useModal、useDarkMode）
layouts/	複数ページに共通するレイアウト（サイドバー付きページ等）
pages/	ルーティング単位で表示されるトップレベルページ（Next.jsのpagesにも対応可能）
services/	API通信、Axios設定、CSRFヘッダなどのインフラ層ロジック
types/	型定義の集約（APIレスポンス、ドメイン型など）
utils/	汎用ユーティリティ関数（日付整形、バリデーションなど）

✅ オプションで追加可能な構成
ディレクトリ	用途例
store/	Redux, Zustand, Recoil などの状態管理ストア
config/	アプリ設定、環境変数の統一管理
tests/	単体・統合テスト（Jest, React Testing Library）
i18n/	国際化対応（多言語JSONなど）
mocks/	APIレスポンスのモック（mswなど）